{
  "meta": {
    "project": "AdiCheats Authentication System",
    "date": "2025-10-29",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "AdiCheats is a secure, feature-rich authentication and license management system providing application user management, HWID locking, version control, blacklist administration, real-time webhook notifications, and seamless C# client integration. It leverages GitHub as a backend for data storage and offers an easy-to-use dashboard for managing applications, users, licenses, and security events.",
  "core_goals": [
    "Provide a robust authentication system supporting version control and hardware ID locking.",
    "Enable detailed user management with expiration, pause, ban, and HWID reset capabilities.",
    "Manage applications and license keys with CRUD operations and secure API key management.",
    "Implement blacklist functionality for IPs, usernames, and HWIDs to restrict access.",
    "Deliver real-time monitoring through activity logs and configurable webhooks.",
    "Offer simple C# SDK for easy client integration with comprehensive error handling.",
    "Replace traditional database backends with GitHub-based storage for transparency and cost efficiency."
  ],
  "key_features": [
    "Firebase-replaced simple session-based user authentication via GitHub backend.",
    "Complete CRUD for applications including version and HWID lock settings.",
    "User management with status controls (pause, ban, expiration) and HWID resetting.",
    "License key creation, management, and usage enforcement.",
    "Blacklist system blocking IPs, usernames, and hardware IDs with reason tagging.",
    "Event-driven webhook notifications with Discord embed support.",
    "Activity logs filterable by application and user for security auditing.",
    "C# Integration SDK with error handling for version mismatch, HWID issues, blacklists, account status, and auto-update prompts.",
    "GitHub service acting as backend data store with version control of JSON data files.",
    "Dashboard for managing applications, users, licenses, webhooks, blacklists, and activity logs."
  ],
  "user_flow_summary": [
    "Admin users authenticate via Firebase-replaced simple login system to access dashboard.",
    "Admins create and configure applications including setting API keys, versions, and HWID locking preferences.",
    "Admins manage end users within applications, including creating users with HWID locks, setting expiration dates, pausing, banning, or resetting HWIDs.",
    "Client applications use API endpoints to authenticate end users with username, password, API key, and optional HWID.",
    "On login, system validates credentials, checks blacklists, version compatibility, and HWID status, sending webhook notifications on relevant events.",
    "Registered users can be registered via API with license keys and expiration details.",
    "Admins manage license keys linked to applications, monitoring usage and validity.",
    "Admins configure blacklists and webhooks to secure their applications and receive real-time alerts.",
    "Activity logs provide a detailed audit trail, viewable by admins through the dashboard.",
    "C# client apps integrate using the provided SDK, handling common errors with user-friendly dialogs and automatic update workflows."
  ],
  "validation_criteria": [
    "Successful authentication and session management for admin and end users.",
    "Correct enforcement of version control and HWID locking during login.",
    "CRUD operations for applications, users, licenses, blacklists, webhooks, and activity logs function as expected.",
    "API endpoints return appropriate status codes and detailed responses for all actions.",
    "Webhook events trigger correctly on login, registration, failures, blacklist hits, and account status changes.",
    "Blacklist entries effectively prevent specified IPs, usernames, or HWIDs from accessing applications.",
    "C# SDK handles all documented errors and edge cases with proper user feedback and recovery flows.",
    "GitHub backend stores and updates JSON data reliably with no data loss or concurrency issues.",
    "Dashboard UI allows comprehensive management and real-time monitoring of system state and events.",
    "Rate limiting enforced for login, registration, and API usage as specified.",
    "Security best practices for API key handling, HWID generation, and session validation are implemented and audited."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "React",
      "Express.js",
      "Node.js",
      "Vite",
      "TanStack Query (React Query)",
      "Zod",
      "Firebase Auth",
      "GitHub as Database",
      "Tailwind CSS",
      "Shadcn UI"
    ],
    "features": [
      {
        "name": "User Authentication",
        "description": "Firebase-based authentication system for admin users to login and manage applications",
        "files": [
          "server/auth.ts",
          "client/src/lib/auth.ts",
          "client/src/hooks/useAuth.ts",
          "client/src/pages/simple-login.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/user": {
              "get": {
                "summary": "Get current authenticated user",
                "responses": {
                  "200": {
                    "description": "User details"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Application Management",
        "description": "CRUD operations for managing applications with API keys, versions, and HWID lock settings",
        "files": [
          "server/routes.ts",
          "server/githubService.ts",
          "client/src/pages/dashboard.tsx",
          "client/src/pages/app-management.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/applications": {
              "get": {
                "summary": "Get all applications for authenticated user",
                "responses": {
                  "200": {
                    "description": "List of applications"
                  }
                }
              },
              "post": {
                "summary": "Create a new application",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "version": {
                            "type": "string"
                          },
                          "hwidLockEnabled": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Application created"
                  }
                }
              }
            },
            "/api/applications/{id}": {
              "get": {
                "summary": "Get application by ID",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "integer"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Application details"
                  }
                }
              },
              "patch": {
                "summary": "Update application",
                "responses": {
                  "200": {
                    "description": "Application updated"
                  }
                }
              },
              "delete": {
                "summary": "Delete application",
                "responses": {
                  "200": {
                    "description": "Application deleted"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "User Management (App Users)",
        "description": "Manage end-users of applications with HWID locking, expiration dates, and status control",
        "files": [
          "server/routes.ts",
          "server/githubService.ts",
          "client/src/pages/app-management.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/applications/{id}/users": {
              "get": {
                "summary": "Get all users for an application",
                "responses": {
                  "200": {
                    "description": "List of users"
                  }
                }
              },
              "post": {
                "summary": "Create a new user",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string"
                          },
                          "password": {
                            "type": "string"
                          },
                          "hwid": {
                            "type": "string",
                            "nullable": true
                          },
                          "hwidLockEnabled": {
                            "type": "boolean"
                          },
                          "expiresAt": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "User created"
                  }
                }
              }
            },
            "/api/applications/{id}/users/{userId}": {
              "patch": {
                "summary": "Update user",
                "responses": {
                  "200": {
                    "description": "User updated"
                  }
                }
              },
              "delete": {
                "summary": "Delete user",
                "responses": {
                  "200": {
                    "description": "User deleted"
                  }
                }
              }
            },
            "/api/applications/{id}/users/{userId}/pause": {
              "post": {
                "summary": "Pause user account",
                "responses": {
                  "200": {
                    "description": "User paused"
                  }
                }
              }
            },
            "/api/applications/{id}/users/{userId}/unpause": {
              "post": {
                "summary": "Unpause user account",
                "responses": {
                  "200": {
                    "description": "User unpaused"
                  }
                }
              }
            },
            "/api/applications/{id}/users/{userId}/reset-hwid": {
              "post": {
                "summary": "Reset user's hardware ID",
                "responses": {
                  "200": {
                    "description": "HWID reset"
                  }
                }
              }
            },
            "/api/applications/{id}/users/{userId}/ban": {
              "post": {
                "summary": "Ban user",
                "responses": {
                  "200": {
                    "description": "User banned"
                  }
                }
              }
            },
            "/api/applications/{id}/users/{userId}/unban": {
              "post": {
                "summary": "Unban user",
                "responses": {
                  "200": {
                    "description": "User unbanned"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Client Authentication API",
        "description": "API endpoints for client applications to authenticate end-users with username/password and HWID validation",
        "files": [
          "server/routes.ts",
          "server/webhookService.ts",
          "server/githubService.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/v1/login": {
              "post": {
                "summary": "Authenticate end-user",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string"
                          },
                          "password": {
                            "type": "string"
                          },
                          "api_key": {
                            "type": "string"
                          },
                          "version": {
                            "type": "string"
                          },
                          "hwid": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "username",
                          "password",
                          "api_key"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Login successful",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "success": {
                              "type": "boolean"
                            },
                            "message": {
                              "type": "string"
                            },
                            "user_id": {
                              "type": "integer"
                            },
                            "username": {
                              "type": "string"
                            },
                            "hwid_locked": {
                              "type": "boolean"
                            },
                            "expires_at": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Invalid credentials"
                  }
                }
              }
            },
            "/api/v1/register": {
              "post": {
                "summary": "Register new end-user with license key",
                "responses": {
                  "201": {
                    "description": "User registered"
                  }
                }
              }
            },
            "/api/v1/verify": {
              "post": {
                "summary": "Verify user session",
                "responses": {
                  "200": {
                    "description": "Session valid"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "License Key Management",
        "description": "Create and manage license keys for user registration with expiration and usage limits",
        "files": [
          "server/routes.ts",
          "server/githubService.ts",
          "client/src/pages/app-management.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/applications/{id}/licenses": {
              "get": {
                "summary": "Get all license keys for application",
                "responses": {
                  "200": {
                    "description": "List of license keys"
                  }
                }
              },
              "post": {
                "summary": "Create new license key",
                "responses": {
                  "201": {
                    "description": "License key created"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Activity Logs",
        "description": "Track and view all authentication events and user activities",
        "files": [
          "server/routes.ts",
          "server/githubService.ts",
          "client/src/pages/activity-logs.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/activity-logs": {
              "get": {
                "summary": "Get activity logs",
                "parameters": [
                  {
                    "name": "applicationId",
                    "in": "query",
                    "schema": {
                      "type": "integer"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "List of activity logs"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Blacklist Management",
        "description": "Block specific IPs, usernames, or HWIDs from accessing applications",
        "files": [
          "server/routes.ts",
          "server/githubService.ts",
          "client/src/pages/app-management.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/blacklist": {
              "get": {
                "summary": "Get all blacklist entries",
                "responses": {
                  "200": {
                    "description": "List of blacklist entries"
                  }
                }
              },
              "post": {
                "summary": "Add blacklist entry",
                "responses": {
                  "201": {
                    "description": "Blacklist entry created"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Webhooks",
        "description": "Configure webhooks to receive notifications for authentication events",
        "files": [
          "server/routes.ts",
          "server/webhookService.ts",
          "server/githubService.ts",
          "client/src/pages/webhooks.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/webhooks": {
              "get": {
                "summary": "Get all webhooks",
                "responses": {
                  "200": {
                    "description": "List of webhooks"
                  }
                }
              },
              "post": {
                "summary": "Create webhook",
                "responses": {
                  "201": {
                    "description": "Webhook created"
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
